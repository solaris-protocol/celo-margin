/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PoolManagerInterface extends ethers.utils.Interface {
  functions: {
    "batchRefreshPools(address[])": FunctionFragment;
    "batchSetWeight(address[],uint256[])": FunctionFragment;
    "beginInitializePeriod()": FunctionFragment;
    "commitInitializePeriod()": FunctionFragment;
    "computeAmountForPeriod(uint256)": FunctionFragment;
    "computeAmountForPool(address,uint256)": FunctionFragment;
    "computePoolShare(address,uint256)": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "initializePeriod(address[])": FunctionFragment;
    "isOwner()": FunctionFragment;
    "miningAllocator()": FunctionFragment;
    "nextPeriod()": FunctionFragment;
    "operator()": FunctionFragment;
    "owner()": FunctionFragment;
    "pools(address)": FunctionFragment;
    "poolsByIndex(uint256)": FunctionFragment;
    "poolsCount()": FunctionFragment;
    "recoverERC20(address,address,uint256)": FunctionFragment;
    "refreshPool(address)": FunctionFragment;
    "releaseSchedule()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardsToken()": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setPaused(address,bool)": FunctionFragment;
    "setWeight(address,uint256)": FunctionFragment;
    "totalWeight()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchRefreshPools",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSetWeight",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "beginInitializePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitInitializePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeAmountForPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeAmountForPool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computePoolShare",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializePeriod",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "miningAllocator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [string]): string;
  encodeFunctionData(
    functionFragment: "poolsByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "refreshPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "releaseSchedule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPaused",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWeight",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchRefreshPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSetWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beginInitializePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitInitializePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAmountForPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAmountForPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computePoolShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "miningAllocator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolsByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolsCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refreshPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWeight", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OperatorTransferred(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PeriodInitialized(uint256,uint256)": EventFragment;
    "UpdatePoolWeight(address,uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OperatorTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeriodInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePoolWeight"): EventFragment;
}

export type OperatorTransferredEvent = TypedEvent<
  [string, string] & { oldOperator: string; newOperator: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PeriodInitializedEvent = TypedEvent<
  [BigNumber, BigNumber] & { index: BigNumber; amount: BigNumber }
>;

export type UpdatePoolWeightEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean] & {
    stakingToken: string;
    index: BigNumber;
    weight: BigNumber;
    isNewPool: boolean;
  }
>;

export class PoolManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolManagerInterface;

  functions: {
    batchRefreshPools(
      _stakingTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchSetWeight(
      _stakingTokens: string[],
      _weights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beginInitializePeriod(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitInitializePeriod(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    computeAmountForPeriod(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeAmountForPool(
      _stakingToken: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computePoolShare(
      _stakingToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentPeriod(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber] & {
        index: BigNumber;
        amount: BigNumber;
        isInitializing: boolean;
        totalWeightAllocated: BigNumber;
      }
    >;

    initializePeriod(
      _stakingTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    miningAllocator(overrides?: CallOverrides): Promise<[string]>;

    nextPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber] & {
        index: BigNumber;
        stakingToken: string;
        poolAddress: string;
        weight: BigNumber;
        nextPeriod: BigNumber;
      }
    >;

    poolsByIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    poolsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    recoverERC20(
      _pool: string,
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refreshPool(
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseSchedule(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardsToken(overrides?: CallOverrides): Promise<[string]>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaused(
      _pool: string,
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWeight(
      _stakingToken: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  batchRefreshPools(
    _stakingTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchSetWeight(
    _stakingTokens: string[],
    _weights: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beginInitializePeriod(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitInitializePeriod(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  computeAmountForPeriod(
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeAmountForPool(
    _stakingToken: string,
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computePoolShare(
    _stakingToken: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentPeriod(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, BigNumber] & {
      index: BigNumber;
      amount: BigNumber;
      isInitializing: boolean;
      totalWeightAllocated: BigNumber;
    }
  >;

  initializePeriod(
    _stakingTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  miningAllocator(overrides?: CallOverrides): Promise<string>;

  nextPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  operator(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pools(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, BigNumber] & {
      index: BigNumber;
      stakingToken: string;
      poolAddress: string;
      weight: BigNumber;
      nextPeriod: BigNumber;
    }
  >;

  poolsByIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  poolsCount(overrides?: CallOverrides): Promise<BigNumber>;

  recoverERC20(
    _pool: string,
    _tokenAddress: string,
    _tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refreshPool(
    _stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseSchedule(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardsToken(overrides?: CallOverrides): Promise<string>;

  setOperator(
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaused(
    _pool: string,
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWeight(
    _stakingToken: string,
    _weight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchRefreshPools(
      _stakingTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchSetWeight(
      _stakingTokens: string[],
      _weights: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    beginInitializePeriod(overrides?: CallOverrides): Promise<void>;

    commitInitializePeriod(overrides?: CallOverrides): Promise<void>;

    computeAmountForPeriod(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeAmountForPool(
      _stakingToken: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computePoolShare(
      _stakingToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPeriod(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber] & {
        index: BigNumber;
        amount: BigNumber;
        isInitializing: boolean;
        totalWeightAllocated: BigNumber;
      }
    >;

    initializePeriod(
      _stakingTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    miningAllocator(overrides?: CallOverrides): Promise<string>;

    nextPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber] & {
        index: BigNumber;
        stakingToken: string;
        poolAddress: string;
        weight: BigNumber;
        nextPeriod: BigNumber;
      }
    >;

    poolsByIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    poolsCount(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      _pool: string,
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    refreshPool(
      _stakingToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseSchedule(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardsToken(overrides?: CallOverrides): Promise<string>;

    setOperator(_operator: string, overrides?: CallOverrides): Promise<void>;

    setPaused(
      _pool: string,
      _paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWeight(
      _stakingToken: string,
      _weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OperatorTransferred(address,address)"(
      oldOperator?: null,
      newOperator?: null
    ): TypedEventFilter<
      [string, string],
      { oldOperator: string; newOperator: string }
    >;

    OperatorTransferred(
      oldOperator?: null,
      newOperator?: null
    ): TypedEventFilter<
      [string, string],
      { oldOperator: string; newOperator: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PeriodInitialized(uint256,uint256)"(
      index?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { index: BigNumber; amount: BigNumber }
    >;

    PeriodInitialized(
      index?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { index: BigNumber; amount: BigNumber }
    >;

    "UpdatePoolWeight(address,uint256,uint256,bool)"(
      stakingToken?: string | null,
      index?: BigNumberish | null,
      weight?: null,
      isNewPool?: boolean | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, boolean],
      {
        stakingToken: string;
        index: BigNumber;
        weight: BigNumber;
        isNewPool: boolean;
      }
    >;

    UpdatePoolWeight(
      stakingToken?: string | null,
      index?: BigNumberish | null,
      weight?: null,
      isNewPool?: boolean | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, boolean],
      {
        stakingToken: string;
        index: BigNumber;
        weight: BigNumber;
        isNewPool: boolean;
      }
    >;
  };

  estimateGas: {
    batchRefreshPools(
      _stakingTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchSetWeight(
      _stakingTokens: string[],
      _weights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beginInitializePeriod(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitInitializePeriod(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    computeAmountForPeriod(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeAmountForPool(
      _stakingToken: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computePoolShare(
      _stakingToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    initializePeriod(
      _stakingTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    miningAllocator(overrides?: CallOverrides): Promise<BigNumber>;

    nextPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolsByIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolsCount(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      _pool: string,
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refreshPool(
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseSchedule(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardsToken(overrides?: CallOverrides): Promise<BigNumber>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaused(
      _pool: string,
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWeight(
      _stakingToken: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchRefreshPools(
      _stakingTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchSetWeight(
      _stakingTokens: string[],
      _weights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beginInitializePeriod(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitInitializePeriod(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    computeAmountForPeriod(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeAmountForPool(
      _stakingToken: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computePoolShare(
      _stakingToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializePeriod(
      _stakingTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    miningAllocator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolsByIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      _pool: string,
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refreshPool(
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseSchedule(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaused(
      _pool: string,
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWeight(
      _stakingToken: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

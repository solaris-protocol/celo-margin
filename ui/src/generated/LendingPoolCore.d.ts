/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LendingPoolCoreInterface extends ethers.utils.Interface {
  functions: {
    "CORE_REVISION()": FunctionFragment;
    "addressesProvider()": FunctionFragment;
    "lendingPoolAddress()": FunctionFragment;
    "reservesList(uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "updateStateOnDeposit(address,address,uint256,bool)": FunctionFragment;
    "updateStateOnRedeem(address,address,uint256,bool)": FunctionFragment;
    "updateStateOnFlashLoan(address,uint256,uint256,uint256)": FunctionFragment;
    "updateStateOnBorrow(address,address,uint256,uint256,uint8)": FunctionFragment;
    "updateStateOnRepay(address,address,uint256,uint256,uint256,bool)": FunctionFragment;
    "updateStateOnSwapRate(address,address,uint256,uint256,uint256,uint8)": FunctionFragment;
    "updateStateOnLiquidation(address,address,address,uint256,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "updateStateOnRebalance(address,address,uint256)": FunctionFragment;
    "setUserUseReserveAsCollateral(address,address,bool)": FunctionFragment;
    "transferToUser(address,address,uint256)": FunctionFragment;
    "transferToFeeCollectionAddress(address,address,uint256,address)": FunctionFragment;
    "liquidateFee(address,uint256,address)": FunctionFragment;
    "transferToReserve(address,address,uint256)": FunctionFragment;
    "getUserBasicReserveData(address,address)": FunctionFragment;
    "isUserAllowedToBorrowAtStable(address,address,uint256)": FunctionFragment;
    "getUserUnderlyingAssetBalance(address,address)": FunctionFragment;
    "getReserveInterestRateStrategyAddress(address)": FunctionFragment;
    "getReserveATokenAddress(address)": FunctionFragment;
    "getReserveAvailableLiquidity(address)": FunctionFragment;
    "getReserveTotalLiquidity(address)": FunctionFragment;
    "getReserveNormalizedIncome(address)": FunctionFragment;
    "getReserveTotalBorrows(address)": FunctionFragment;
    "getReserveTotalBorrowsStable(address)": FunctionFragment;
    "getReserveTotalBorrowsVariable(address)": FunctionFragment;
    "getReserveLiquidationThreshold(address)": FunctionFragment;
    "getReserveLiquidationBonus(address)": FunctionFragment;
    "getReserveCurrentVariableBorrowRate(address)": FunctionFragment;
    "getReserveCurrentStableBorrowRate(address)": FunctionFragment;
    "getReserveCurrentAverageStableBorrowRate(address)": FunctionFragment;
    "getReserveCurrentLiquidityRate(address)": FunctionFragment;
    "getReserveLiquidityCumulativeIndex(address)": FunctionFragment;
    "getReserveVariableBorrowsCumulativeIndex(address)": FunctionFragment;
    "getReserveConfiguration(address)": FunctionFragment;
    "getReserveDecimals(address)": FunctionFragment;
    "isReserveBorrowingEnabled(address)": FunctionFragment;
    "isReserveUsageAsCollateralEnabled(address)": FunctionFragment;
    "getReserveIsStableBorrowRateEnabled(address)": FunctionFragment;
    "getReserveIsActive(address)": FunctionFragment;
    "getReserveIsFreezed(address)": FunctionFragment;
    "getReserveLastUpdate(address)": FunctionFragment;
    "getReserveUtilizationRate(address)": FunctionFragment;
    "getReserves()": FunctionFragment;
    "isUserUseReserveAsCollateralEnabled(address,address)": FunctionFragment;
    "getUserOriginationFee(address,address)": FunctionFragment;
    "getUserCurrentBorrowRateMode(address,address)": FunctionFragment;
    "getUserCurrentStableBorrowRate(address,address)": FunctionFragment;
    "getUserBorrowBalances(address,address)": FunctionFragment;
    "getUserVariableBorrowCumulativeIndex(address,address)": FunctionFragment;
    "getUserLastUpdate(address,address)": FunctionFragment;
    "refreshConfiguration()": FunctionFragment;
    "initReserve(address,address,uint256,address)": FunctionFragment;
    "setReserveInterestRateStrategyAddress(address,address)": FunctionFragment;
    "enableBorrowingOnReserve(address,bool)": FunctionFragment;
    "disableBorrowingOnReserve(address)": FunctionFragment;
    "enableReserveAsCollateral(address,uint256,uint256,uint256)": FunctionFragment;
    "disableReserveAsCollateral(address)": FunctionFragment;
    "enableReserveStableBorrowRate(address)": FunctionFragment;
    "disableReserveStableBorrowRate(address)": FunctionFragment;
    "activateReserve(address)": FunctionFragment;
    "deactivateReserve(address)": FunctionFragment;
    "freezeReserve(address)": FunctionFragment;
    "unfreezeReserve(address)": FunctionFragment;
    "setReserveBaseLTVasCollateral(address,uint256)": FunctionFragment;
    "setReserveLiquidationThreshold(address,uint256)": FunctionFragment;
    "setReserveLiquidationBonus(address,uint256)": FunctionFragment;
    "setReserveDecimals(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CORE_REVISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lendingPoolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reservesList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateStateOnDeposit",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStateOnRedeem",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStateOnFlashLoan",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStateOnBorrow",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStateOnRepay",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStateOnSwapRate",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStateOnLiquidation",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStateOnRebalance",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserUseReserveAsCollateral",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToUser",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToFeeCollectionAddress",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateFee",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToReserve",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBasicReserveData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserAllowedToBorrowAtStable",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserUnderlyingAssetBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveInterestRateStrategyAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveATokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveAvailableLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveTotalLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveNormalizedIncome",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveTotalBorrows",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveTotalBorrowsStable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveTotalBorrowsVariable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveLiquidationThreshold",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveLiquidationBonus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveCurrentVariableBorrowRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveCurrentStableBorrowRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveCurrentAverageStableBorrowRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveCurrentLiquidityRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveLiquidityCumulativeIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveVariableBorrowsCumulativeIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveConfiguration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveDecimals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isReserveBorrowingEnabled",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isReserveUsageAsCollateralEnabled",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveIsStableBorrowRateEnabled",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveIsActive",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveIsFreezed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveLastUpdate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveUtilizationRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUserUseReserveAsCollateralEnabled",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOriginationFee",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCurrentBorrowRateMode",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCurrentStableBorrowRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBorrowBalances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVariableBorrowCumulativeIndex",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLastUpdate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "refreshConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initReserve",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveInterestRateStrategyAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableBorrowingOnReserve",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "disableBorrowingOnReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableReserveAsCollateral",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableReserveAsCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableReserveStableBorrowRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disableReserveStableBorrowRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "activateReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveBaseLTVasCollateral",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveLiquidationThreshold",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveLiquidationBonus",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveDecimals",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CORE_REVISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservesList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateStateOnDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStateOnRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStateOnFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStateOnBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStateOnRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStateOnSwapRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStateOnLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStateOnRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserUseReserveAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToFeeCollectionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBasicReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserAllowedToBorrowAtStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserUnderlyingAssetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveInterestRateStrategyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveATokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveAvailableLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveTotalLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveNormalizedIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveTotalBorrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveTotalBorrowsStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveTotalBorrowsVariable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveLiquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveLiquidationBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveCurrentVariableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveCurrentStableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveCurrentAverageStableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveCurrentLiquidityRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveLiquidityCumulativeIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveVariableBorrowsCumulativeIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReserveBorrowingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReserveUsageAsCollateralEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveIsStableBorrowRateEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveIsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveIsFreezed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveLastUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveUtilizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserUseReserveAsCollateralEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOriginationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCurrentBorrowRateMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCurrentStableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBorrowBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVariableBorrowCumulativeIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLastUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refreshConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveInterestRateStrategyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableBorrowingOnReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableBorrowingOnReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableReserveAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableReserveAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableReserveStableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableReserveStableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveBaseLTVasCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveLiquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveLiquidationBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveDecimals",
    data: BytesLike
  ): Result;

  events: {
    "ReserveUpdated(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReserveUpdated"): EventFragment;
}

export type ReserveUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    reserve: string;
    liquidityRate: BigNumber;
    stableBorrowRate: BigNumber;
    variableBorrowRate: BigNumber;
    liquidityIndex: BigNumber;
    variableBorrowIndex: BigNumber;
  }
>;

export class LendingPoolCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LendingPoolCoreInterface;

  functions: {
    CORE_REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    addressesProvider(overrides?: CallOverrides): Promise<[string]>;

    lendingPoolAddress(overrides?: CallOverrides): Promise<[string]>;

    reservesList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _addressesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStateOnDeposit(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _isFirstDeposit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStateOnRedeem(
      _reserve: string,
      _user: string,
      _amountRedeemed: BigNumberish,
      _userRedeemedEverything: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStateOnFlashLoan(
      _reserve: string,
      _availableLiquidityBefore: BigNumberish,
      _income: BigNumberish,
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStateOnBorrow(
      _reserve: string,
      _user: string,
      _amountBorrowed: BigNumberish,
      _borrowFee: BigNumberish,
      _rateMode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStateOnRepay(
      _reserve: string,
      _user: string,
      _paybackAmountMinusFees: BigNumberish,
      _originationFeeRepaid: BigNumberish,
      _balanceIncrease: BigNumberish,
      _repaidWholeLoan: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStateOnSwapRate(
      _reserve: string,
      _user: string,
      _principalBorrowBalance: BigNumberish,
      _compoundedBorrowBalance: BigNumberish,
      _balanceIncrease: BigNumberish,
      _currentRateMode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStateOnLiquidation(
      _principalReserve: string,
      _collateralReserve: string,
      _user: string,
      _amountToLiquidate: BigNumberish,
      _collateralToLiquidate: BigNumberish,
      _feeLiquidated: BigNumberish,
      _liquidatedCollateralForFee: BigNumberish,
      _balanceIncrease: BigNumberish,
      _liquidatorReceivesAToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStateOnRebalance(
      _reserve: string,
      _user: string,
      _balanceIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUserUseReserveAsCollateral(
      _reserve: string,
      _user: string,
      _useAsCollateral: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferToUser(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferToFeeCollectionAddress(
      _token: string,
      _user: string,
      _amount: BigNumberish,
      _destination: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateFee(
      _token: string,
      _amount: BigNumberish,
      _destination: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferToReserve(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserBasicReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, boolean]>;

    isUserAllowedToBorrowAtStable(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getUserUnderlyingAssetBalance(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveInterestRateStrategyAddress(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getReserveATokenAddress(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getReserveAvailableLiquidity(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveTotalLiquidity(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveNormalizedIncome(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveTotalBorrows(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveTotalBorrowsStable(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveTotalBorrowsVariable(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveLiquidationThreshold(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveLiquidationBonus(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveCurrentVariableBorrowRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveCurrentStableBorrowRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveCurrentAverageStableBorrowRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveCurrentLiquidityRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveLiquidityCumulativeIndex(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveVariableBorrowsCumulativeIndex(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveConfiguration(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, boolean]>;

    getReserveDecimals(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isReserveBorrowingEnabled(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isReserveUsageAsCollateralEnabled(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getReserveIsStableBorrowRateEnabled(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getReserveIsActive(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getReserveIsFreezed(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getReserveLastUpdate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[number] & { timestamp: number }>;

    getReserveUtilizationRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserves(overrides?: CallOverrides): Promise<[string[]]>;

    isUserUseReserveAsCollateralEnabled(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getUserOriginationFee(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserCurrentBorrowRateMode(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getUserCurrentStableBorrowRate(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserBorrowBalances(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getUserVariableBorrowCumulativeIndex(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserLastUpdate(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    refreshConfiguration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initReserve(
      _reserve: string,
      _aTokenAddress: string,
      _decimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveInterestRateStrategyAddress(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableBorrowingOnReserve(
      _reserve: string,
      _stableBorrowRateEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableBorrowingOnReserve(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableReserveAsCollateral(
      _reserve: string,
      _baseLTVasCollateral: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _liquidationBonus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableReserveAsCollateral(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableReserveStableBorrowRate(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableReserveStableBorrowRate(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activateReserve(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deactivateReserve(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freezeReserve(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unfreezeReserve(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveBaseLTVasCollateral(
      _reserve: string,
      _ltv: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveLiquidationThreshold(
      _reserve: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveLiquidationBonus(
      _reserve: string,
      _bonus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveDecimals(
      _reserve: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CORE_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  addressesProvider(overrides?: CallOverrides): Promise<string>;

  lendingPoolAddress(overrides?: CallOverrides): Promise<string>;

  reservesList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  initialize(
    _addressesProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStateOnDeposit(
    _reserve: string,
    _user: string,
    _amount: BigNumberish,
    _isFirstDeposit: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStateOnRedeem(
    _reserve: string,
    _user: string,
    _amountRedeemed: BigNumberish,
    _userRedeemedEverything: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStateOnFlashLoan(
    _reserve: string,
    _availableLiquidityBefore: BigNumberish,
    _income: BigNumberish,
    _protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStateOnBorrow(
    _reserve: string,
    _user: string,
    _amountBorrowed: BigNumberish,
    _borrowFee: BigNumberish,
    _rateMode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStateOnRepay(
    _reserve: string,
    _user: string,
    _paybackAmountMinusFees: BigNumberish,
    _originationFeeRepaid: BigNumberish,
    _balanceIncrease: BigNumberish,
    _repaidWholeLoan: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStateOnSwapRate(
    _reserve: string,
    _user: string,
    _principalBorrowBalance: BigNumberish,
    _compoundedBorrowBalance: BigNumberish,
    _balanceIncrease: BigNumberish,
    _currentRateMode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStateOnLiquidation(
    _principalReserve: string,
    _collateralReserve: string,
    _user: string,
    _amountToLiquidate: BigNumberish,
    _collateralToLiquidate: BigNumberish,
    _feeLiquidated: BigNumberish,
    _liquidatedCollateralForFee: BigNumberish,
    _balanceIncrease: BigNumberish,
    _liquidatorReceivesAToken: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStateOnRebalance(
    _reserve: string,
    _user: string,
    _balanceIncrease: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUserUseReserveAsCollateral(
    _reserve: string,
    _user: string,
    _useAsCollateral: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferToUser(
    _reserve: string,
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferToFeeCollectionAddress(
    _token: string,
    _user: string,
    _amount: BigNumberish,
    _destination: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateFee(
    _token: string,
    _amount: BigNumberish,
    _destination: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferToReserve(
    _reserve: string,
    _user: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserBasicReserveData(
    _reserve: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, boolean]>;

  isUserAllowedToBorrowAtStable(
    _reserve: string,
    _user: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getUserUnderlyingAssetBalance(
    _reserve: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveInterestRateStrategyAddress(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getReserveATokenAddress(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getReserveAvailableLiquidity(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveTotalLiquidity(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveNormalizedIncome(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveTotalBorrows(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveTotalBorrowsStable(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveTotalBorrowsVariable(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveLiquidationThreshold(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveLiquidationBonus(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveCurrentVariableBorrowRate(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveCurrentStableBorrowRate(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveCurrentAverageStableBorrowRate(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveCurrentLiquidityRate(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveLiquidityCumulativeIndex(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveVariableBorrowsCumulativeIndex(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveConfiguration(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, boolean]>;

  getReserveDecimals(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isReserveBorrowingEnabled(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isReserveUsageAsCollateralEnabled(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getReserveIsStableBorrowRateEnabled(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getReserveIsActive(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getReserveIsFreezed(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getReserveLastUpdate(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getReserveUtilizationRate(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserves(overrides?: CallOverrides): Promise<string[]>;

  isUserUseReserveAsCollateralEnabled(
    _reserve: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getUserOriginationFee(
    _reserve: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserCurrentBorrowRateMode(
    _reserve: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getUserCurrentStableBorrowRate(
    _reserve: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserBorrowBalances(
    _reserve: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getUserVariableBorrowCumulativeIndex(
    _reserve: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserLastUpdate(
    _reserve: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  refreshConfiguration(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initReserve(
    _reserve: string,
    _aTokenAddress: string,
    _decimals: BigNumberish,
    _interestRateStrategyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveInterestRateStrategyAddress(
    _reserve: string,
    _rateStrategyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableBorrowingOnReserve(
    _reserve: string,
    _stableBorrowRateEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableBorrowingOnReserve(
    _reserve: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableReserveAsCollateral(
    _reserve: string,
    _baseLTVasCollateral: BigNumberish,
    _liquidationThreshold: BigNumberish,
    _liquidationBonus: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableReserveAsCollateral(
    _reserve: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableReserveStableBorrowRate(
    _reserve: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableReserveStableBorrowRate(
    _reserve: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  activateReserve(
    _reserve: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deactivateReserve(
    _reserve: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freezeReserve(
    _reserve: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unfreezeReserve(
    _reserve: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveBaseLTVasCollateral(
    _reserve: string,
    _ltv: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveLiquidationThreshold(
    _reserve: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveLiquidationBonus(
    _reserve: string,
    _bonus: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveDecimals(
    _reserve: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CORE_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<string>;

    lendingPoolAddress(overrides?: CallOverrides): Promise<string>;

    reservesList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _addressesProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStateOnDeposit(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _isFirstDeposit: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStateOnRedeem(
      _reserve: string,
      _user: string,
      _amountRedeemed: BigNumberish,
      _userRedeemedEverything: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStateOnFlashLoan(
      _reserve: string,
      _availableLiquidityBefore: BigNumberish,
      _income: BigNumberish,
      _protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStateOnBorrow(
      _reserve: string,
      _user: string,
      _amountBorrowed: BigNumberish,
      _borrowFee: BigNumberish,
      _rateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    updateStateOnRepay(
      _reserve: string,
      _user: string,
      _paybackAmountMinusFees: BigNumberish,
      _originationFeeRepaid: BigNumberish,
      _balanceIncrease: BigNumberish,
      _repaidWholeLoan: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStateOnSwapRate(
      _reserve: string,
      _user: string,
      _principalBorrowBalance: BigNumberish,
      _compoundedBorrowBalance: BigNumberish,
      _balanceIncrease: BigNumberish,
      _currentRateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber]>;

    updateStateOnLiquidation(
      _principalReserve: string,
      _collateralReserve: string,
      _user: string,
      _amountToLiquidate: BigNumberish,
      _collateralToLiquidate: BigNumberish,
      _feeLiquidated: BigNumberish,
      _liquidatedCollateralForFee: BigNumberish,
      _balanceIncrease: BigNumberish,
      _liquidatorReceivesAToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStateOnRebalance(
      _reserve: string,
      _user: string,
      _balanceIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setUserUseReserveAsCollateral(
      _reserve: string,
      _user: string,
      _useAsCollateral: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToUser(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToFeeCollectionAddress(
      _token: string,
      _user: string,
      _amount: BigNumberish,
      _destination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateFee(
      _token: string,
      _amount: BigNumberish,
      _destination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToReserve(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getUserBasicReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, boolean]>;

    isUserAllowedToBorrowAtStable(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getUserUnderlyingAssetBalance(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveInterestRateStrategyAddress(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getReserveATokenAddress(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getReserveAvailableLiquidity(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveTotalLiquidity(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveNormalizedIncome(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveTotalBorrows(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveTotalBorrowsStable(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveTotalBorrowsVariable(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveLiquidationThreshold(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveLiquidationBonus(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveCurrentVariableBorrowRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveCurrentStableBorrowRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveCurrentAverageStableBorrowRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveCurrentLiquidityRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveLiquidityCumulativeIndex(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveVariableBorrowsCumulativeIndex(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveConfiguration(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, boolean]>;

    getReserveDecimals(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReserveBorrowingEnabled(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isReserveUsageAsCollateralEnabled(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getReserveIsStableBorrowRateEnabled(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getReserveIsActive(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getReserveIsFreezed(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getReserveLastUpdate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getReserveUtilizationRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<string[]>;

    isUserUseReserveAsCollateralEnabled(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getUserOriginationFee(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserCurrentBorrowRateMode(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getUserCurrentStableBorrowRate(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserBorrowBalances(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getUserVariableBorrowCumulativeIndex(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLastUpdate(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refreshConfiguration(overrides?: CallOverrides): Promise<void>;

    initReserve(
      _reserve: string,
      _aTokenAddress: string,
      _decimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveInterestRateStrategyAddress(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enableBorrowingOnReserve(
      _reserve: string,
      _stableBorrowRateEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    disableBorrowingOnReserve(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enableReserveAsCollateral(
      _reserve: string,
      _baseLTVasCollateral: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _liquidationBonus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    disableReserveAsCollateral(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enableReserveStableBorrowRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    disableReserveStableBorrowRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    activateReserve(_reserve: string, overrides?: CallOverrides): Promise<void>;

    deactivateReserve(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    freezeReserve(_reserve: string, overrides?: CallOverrides): Promise<void>;

    unfreezeReserve(_reserve: string, overrides?: CallOverrides): Promise<void>;

    setReserveBaseLTVasCollateral(
      _reserve: string,
      _ltv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveLiquidationThreshold(
      _reserve: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveLiquidationBonus(
      _reserve: string,
      _bonus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveDecimals(
      _reserve: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ReserveUpdated(address,uint256,uint256,uint256,uint256,uint256)"(
      reserve?: string | null,
      liquidityRate?: null,
      stableBorrowRate?: null,
      variableBorrowRate?: null,
      liquidityIndex?: null,
      variableBorrowIndex?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        reserve: string;
        liquidityRate: BigNumber;
        stableBorrowRate: BigNumber;
        variableBorrowRate: BigNumber;
        liquidityIndex: BigNumber;
        variableBorrowIndex: BigNumber;
      }
    >;

    ReserveUpdated(
      reserve?: string | null,
      liquidityRate?: null,
      stableBorrowRate?: null,
      variableBorrowRate?: null,
      liquidityIndex?: null,
      variableBorrowIndex?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        reserve: string;
        liquidityRate: BigNumber;
        stableBorrowRate: BigNumber;
        variableBorrowRate: BigNumber;
        liquidityIndex: BigNumber;
        variableBorrowIndex: BigNumber;
      }
    >;
  };

  estimateGas: {
    CORE_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    lendingPoolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    reservesList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _addressesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStateOnDeposit(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _isFirstDeposit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStateOnRedeem(
      _reserve: string,
      _user: string,
      _amountRedeemed: BigNumberish,
      _userRedeemedEverything: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStateOnFlashLoan(
      _reserve: string,
      _availableLiquidityBefore: BigNumberish,
      _income: BigNumberish,
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStateOnBorrow(
      _reserve: string,
      _user: string,
      _amountBorrowed: BigNumberish,
      _borrowFee: BigNumberish,
      _rateMode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStateOnRepay(
      _reserve: string,
      _user: string,
      _paybackAmountMinusFees: BigNumberish,
      _originationFeeRepaid: BigNumberish,
      _balanceIncrease: BigNumberish,
      _repaidWholeLoan: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStateOnSwapRate(
      _reserve: string,
      _user: string,
      _principalBorrowBalance: BigNumberish,
      _compoundedBorrowBalance: BigNumberish,
      _balanceIncrease: BigNumberish,
      _currentRateMode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStateOnLiquidation(
      _principalReserve: string,
      _collateralReserve: string,
      _user: string,
      _amountToLiquidate: BigNumberish,
      _collateralToLiquidate: BigNumberish,
      _feeLiquidated: BigNumberish,
      _liquidatedCollateralForFee: BigNumberish,
      _balanceIncrease: BigNumberish,
      _liquidatorReceivesAToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStateOnRebalance(
      _reserve: string,
      _user: string,
      _balanceIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUserUseReserveAsCollateral(
      _reserve: string,
      _user: string,
      _useAsCollateral: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferToUser(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferToFeeCollectionAddress(
      _token: string,
      _user: string,
      _amount: BigNumberish,
      _destination: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateFee(
      _token: string,
      _amount: BigNumberish,
      _destination: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferToReserve(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserBasicReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUserAllowedToBorrowAtStable(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserUnderlyingAssetBalance(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveInterestRateStrategyAddress(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveATokenAddress(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveAvailableLiquidity(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveTotalLiquidity(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveNormalizedIncome(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveTotalBorrows(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveTotalBorrowsStable(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveTotalBorrowsVariable(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveLiquidationThreshold(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveLiquidationBonus(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveCurrentVariableBorrowRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveCurrentStableBorrowRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveCurrentAverageStableBorrowRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveCurrentLiquidityRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveLiquidityCumulativeIndex(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveVariableBorrowsCumulativeIndex(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveConfiguration(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveDecimals(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReserveBorrowingEnabled(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReserveUsageAsCollateralEnabled(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveIsStableBorrowRateEnabled(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveIsActive(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveIsFreezed(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveLastUpdate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveUtilizationRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    isUserUseReserveAsCollateralEnabled(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserOriginationFee(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserCurrentBorrowRateMode(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserCurrentStableBorrowRate(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserBorrowBalances(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserVariableBorrowCumulativeIndex(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLastUpdate(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refreshConfiguration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initReserve(
      _reserve: string,
      _aTokenAddress: string,
      _decimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveInterestRateStrategyAddress(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableBorrowingOnReserve(
      _reserve: string,
      _stableBorrowRateEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableBorrowingOnReserve(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableReserveAsCollateral(
      _reserve: string,
      _baseLTVasCollateral: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _liquidationBonus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableReserveAsCollateral(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableReserveStableBorrowRate(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableReserveStableBorrowRate(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    activateReserve(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deactivateReserve(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freezeReserve(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unfreezeReserve(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveBaseLTVasCollateral(
      _reserve: string,
      _ltv: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveLiquidationThreshold(
      _reserve: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveLiquidationBonus(
      _reserve: string,
      _bonus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveDecimals(
      _reserve: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CORE_REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressesProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendingPoolAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reservesList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _addressesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStateOnDeposit(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _isFirstDeposit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStateOnRedeem(
      _reserve: string,
      _user: string,
      _amountRedeemed: BigNumberish,
      _userRedeemedEverything: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStateOnFlashLoan(
      _reserve: string,
      _availableLiquidityBefore: BigNumberish,
      _income: BigNumberish,
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStateOnBorrow(
      _reserve: string,
      _user: string,
      _amountBorrowed: BigNumberish,
      _borrowFee: BigNumberish,
      _rateMode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStateOnRepay(
      _reserve: string,
      _user: string,
      _paybackAmountMinusFees: BigNumberish,
      _originationFeeRepaid: BigNumberish,
      _balanceIncrease: BigNumberish,
      _repaidWholeLoan: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStateOnSwapRate(
      _reserve: string,
      _user: string,
      _principalBorrowBalance: BigNumberish,
      _compoundedBorrowBalance: BigNumberish,
      _balanceIncrease: BigNumberish,
      _currentRateMode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStateOnLiquidation(
      _principalReserve: string,
      _collateralReserve: string,
      _user: string,
      _amountToLiquidate: BigNumberish,
      _collateralToLiquidate: BigNumberish,
      _feeLiquidated: BigNumberish,
      _liquidatedCollateralForFee: BigNumberish,
      _balanceIncrease: BigNumberish,
      _liquidatorReceivesAToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStateOnRebalance(
      _reserve: string,
      _user: string,
      _balanceIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUserUseReserveAsCollateral(
      _reserve: string,
      _user: string,
      _useAsCollateral: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferToUser(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferToFeeCollectionAddress(
      _token: string,
      _user: string,
      _amount: BigNumberish,
      _destination: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateFee(
      _token: string,
      _amount: BigNumberish,
      _destination: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferToReserve(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserBasicReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserAllowedToBorrowAtStable(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserUnderlyingAssetBalance(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveInterestRateStrategyAddress(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveATokenAddress(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveAvailableLiquidity(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveTotalLiquidity(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveNormalizedIncome(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveTotalBorrows(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveTotalBorrowsStable(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveTotalBorrowsVariable(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveLiquidationThreshold(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveLiquidationBonus(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveCurrentVariableBorrowRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveCurrentStableBorrowRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveCurrentAverageStableBorrowRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveCurrentLiquidityRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveLiquidityCumulativeIndex(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveVariableBorrowsCumulativeIndex(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveConfiguration(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveDecimals(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReserveBorrowingEnabled(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReserveUsageAsCollateralEnabled(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveIsStableBorrowRateEnabled(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveIsActive(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveIsFreezed(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveLastUpdate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveUtilizationRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUserUseReserveAsCollateralEnabled(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserOriginationFee(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserCurrentBorrowRateMode(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserCurrentStableBorrowRate(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserBorrowBalances(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserVariableBorrowCumulativeIndex(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserLastUpdate(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refreshConfiguration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initReserve(
      _reserve: string,
      _aTokenAddress: string,
      _decimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveInterestRateStrategyAddress(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableBorrowingOnReserve(
      _reserve: string,
      _stableBorrowRateEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableBorrowingOnReserve(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableReserveAsCollateral(
      _reserve: string,
      _baseLTVasCollateral: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _liquidationBonus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableReserveAsCollateral(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableReserveStableBorrowRate(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableReserveStableBorrowRate(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    activateReserve(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deactivateReserve(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freezeReserve(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unfreezeReserve(
      _reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveBaseLTVasCollateral(
      _reserve: string,
      _ltv: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveLiquidationThreshold(
      _reserve: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveLiquidationBonus(
      _reserve: string,
      _bonus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveDecimals(
      _reserve: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ATokenInterface extends ethers.utils.Interface {
  functions: {
    "UINT_MAX_VALUE()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "symbol()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "underlyingAssetAddress()": FunctionFragment;
    "redirectInterestStream(address)": FunctionFragment;
    "redirectInterestStreamOf(address,address)": FunctionFragment;
    "allowInterestRedirectionTo(address)": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "mintOnDeposit(address,uint256)": FunctionFragment;
    "burnOnLiquidation(address,uint256)": FunctionFragment;
    "transferOnLiquidation(address,address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "principalBalanceOf(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "isTransferAllowed(address,uint256)": FunctionFragment;
    "getUserIndex(address)": FunctionFragment;
    "getInterestRedirectionAddress(address)": FunctionFragment;
    "getRedirectedBalance(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "UINT_MAX_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAssetAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redirectInterestStream",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redirectInterestStreamOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowInterestRedirectionTo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintOnDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnOnLiquidation",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOnLiquidation",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "principalBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferAllowed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestRedirectionAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedirectedBalance",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "UINT_MAX_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAssetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redirectInterestStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redirectInterestStreamOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowInterestRedirectionTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintOnDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnOnLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOnLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "principalBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestRedirectionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedirectedBalance",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BalanceTransfer(address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "BurnOnLiquidation(address,uint256,uint256,uint256)": EventFragment;
    "InterestRedirectionAllowanceChanged(address,address)": EventFragment;
    "InterestStreamRedirected(address,address,uint256,uint256,uint256)": EventFragment;
    "MintOnDeposit(address,uint256,uint256,uint256)": EventFragment;
    "Redeem(address,uint256,uint256,uint256)": EventFragment;
    "RedirectedBalanceUpdated(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BalanceTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BurnOnLiquidation"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InterestRedirectionAllowanceChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestStreamRedirected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintOnDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedirectedBalanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type BalanceTransferEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    _from: string;
    _to: string;
    _value: BigNumber;
    _fromBalanceIncrease: BigNumber;
    _toBalanceIncrease: BigNumber;
    _fromIndex: BigNumber;
    _toIndex: BigNumber;
  }
>;

export type BurnOnLiquidationEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    _from: string;
    _value: BigNumber;
    _fromBalanceIncrease: BigNumber;
    _fromIndex: BigNumber;
  }
>;

export type InterestRedirectionAllowanceChangedEvent = TypedEvent<
  [string, string] & { _from: string; _to: string }
>;

export type InterestStreamRedirectedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    _from: string;
    _to: string;
    _redirectedBalance: BigNumber;
    _fromBalanceIncrease: BigNumber;
    _fromIndex: BigNumber;
  }
>;

export type MintOnDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    _from: string;
    _value: BigNumber;
    _fromBalanceIncrease: BigNumber;
    _fromIndex: BigNumber;
  }
>;

export type RedeemEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    _from: string;
    _value: BigNumber;
    _fromBalanceIncrease: BigNumber;
    _fromIndex: BigNumber;
  }
>;

export type RedirectedBalanceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    _targetAddress: string;
    _targetBalanceIncrease: BigNumber;
    _targetIndex: BigNumber;
    _redirectedBalanceAdded: BigNumber;
    _redirectedBalanceRemoved: BigNumber;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export class AToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ATokenInterface;

  functions: {
    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlyingAssetAddress(overrides?: CallOverrides): Promise<[string]>;

    redirectInterestStream(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redirectInterestStreamOf(
      _from: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowInterestRedirectionTo(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintOnDeposit(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnOnLiquidation(
      _account: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOnLiquidation(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    principalBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    isTransferAllowed(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getUserIndex(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInterestRedirectionAddress(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRedirectedBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  UINT_MAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlyingAssetAddress(overrides?: CallOverrides): Promise<string>;

  redirectInterestStream(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redirectInterestStreamOf(
    _from: string,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowInterestRedirectionTo(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintOnDeposit(
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnOnLiquidation(
    _account: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOnLiquidation(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  principalBalanceOf(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  isTransferAllowed(
    _user: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getUserIndex(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getInterestRedirectionAddress(
    _user: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getRedirectedBalance(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    underlyingAssetAddress(overrides?: CallOverrides): Promise<string>;

    redirectInterestStream(
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    redirectInterestStreamOf(
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowInterestRedirectionTo(
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    mintOnDeposit(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnOnLiquidation(
      _account: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOnLiquidation(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    principalBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    isTransferAllowed(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getUserIndex(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getInterestRedirectionAddress(
      _user: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getRedirectedBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "BalanceTransfer(address,address,uint256,uint256,uint256,uint256,uint256)"(
      _from?: string | null,
      _to?: string | null,
      _value?: null,
      _fromBalanceIncrease?: null,
      _toBalanceIncrease?: null,
      _fromIndex?: null,
      _toIndex?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        _from: string;
        _to: string;
        _value: BigNumber;
        _fromBalanceIncrease: BigNumber;
        _toBalanceIncrease: BigNumber;
        _fromIndex: BigNumber;
        _toIndex: BigNumber;
      }
    >;

    BalanceTransfer(
      _from?: string | null,
      _to?: string | null,
      _value?: null,
      _fromBalanceIncrease?: null,
      _toBalanceIncrease?: null,
      _fromIndex?: null,
      _toIndex?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        _from: string;
        _to: string;
        _value: BigNumber;
        _fromBalanceIncrease: BigNumber;
        _toBalanceIncrease: BigNumber;
        _fromIndex: BigNumber;
        _toIndex: BigNumber;
      }
    >;

    "BurnOnLiquidation(address,uint256,uint256,uint256)"(
      _from?: string | null,
      _value?: null,
      _fromBalanceIncrease?: null,
      _fromIndex?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _from: string;
        _value: BigNumber;
        _fromBalanceIncrease: BigNumber;
        _fromIndex: BigNumber;
      }
    >;

    BurnOnLiquidation(
      _from?: string | null,
      _value?: null,
      _fromBalanceIncrease?: null,
      _fromIndex?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _from: string;
        _value: BigNumber;
        _fromBalanceIncrease: BigNumber;
        _fromIndex: BigNumber;
      }
    >;

    "InterestRedirectionAllowanceChanged(address,address)"(
      _from?: string | null,
      _to?: string | null
    ): TypedEventFilter<[string, string], { _from: string; _to: string }>;

    InterestRedirectionAllowanceChanged(
      _from?: string | null,
      _to?: string | null
    ): TypedEventFilter<[string, string], { _from: string; _to: string }>;

    "InterestStreamRedirected(address,address,uint256,uint256,uint256)"(
      _from?: string | null,
      _to?: string | null,
      _redirectedBalance?: null,
      _fromBalanceIncrease?: null,
      _fromIndex?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        _from: string;
        _to: string;
        _redirectedBalance: BigNumber;
        _fromBalanceIncrease: BigNumber;
        _fromIndex: BigNumber;
      }
    >;

    InterestStreamRedirected(
      _from?: string | null,
      _to?: string | null,
      _redirectedBalance?: null,
      _fromBalanceIncrease?: null,
      _fromIndex?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        _from: string;
        _to: string;
        _redirectedBalance: BigNumber;
        _fromBalanceIncrease: BigNumber;
        _fromIndex: BigNumber;
      }
    >;

    "MintOnDeposit(address,uint256,uint256,uint256)"(
      _from?: string | null,
      _value?: null,
      _fromBalanceIncrease?: null,
      _fromIndex?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _from: string;
        _value: BigNumber;
        _fromBalanceIncrease: BigNumber;
        _fromIndex: BigNumber;
      }
    >;

    MintOnDeposit(
      _from?: string | null,
      _value?: null,
      _fromBalanceIncrease?: null,
      _fromIndex?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _from: string;
        _value: BigNumber;
        _fromBalanceIncrease: BigNumber;
        _fromIndex: BigNumber;
      }
    >;

    "Redeem(address,uint256,uint256,uint256)"(
      _from?: string | null,
      _value?: null,
      _fromBalanceIncrease?: null,
      _fromIndex?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _from: string;
        _value: BigNumber;
        _fromBalanceIncrease: BigNumber;
        _fromIndex: BigNumber;
      }
    >;

    Redeem(
      _from?: string | null,
      _value?: null,
      _fromBalanceIncrease?: null,
      _fromIndex?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _from: string;
        _value: BigNumber;
        _fromBalanceIncrease: BigNumber;
        _fromIndex: BigNumber;
      }
    >;

    "RedirectedBalanceUpdated(address,uint256,uint256,uint256,uint256)"(
      _targetAddress?: string | null,
      _targetBalanceIncrease?: null,
      _targetIndex?: null,
      _redirectedBalanceAdded?: null,
      _redirectedBalanceRemoved?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        _targetAddress: string;
        _targetBalanceIncrease: BigNumber;
        _targetIndex: BigNumber;
        _redirectedBalanceAdded: BigNumber;
        _redirectedBalanceRemoved: BigNumber;
      }
    >;

    RedirectedBalanceUpdated(
      _targetAddress?: string | null,
      _targetBalanceIncrease?: null,
      _targetIndex?: null,
      _redirectedBalanceAdded?: null,
      _redirectedBalanceRemoved?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        _targetAddress: string;
        _targetBalanceIncrease: BigNumber;
        _targetIndex: BigNumber;
        _redirectedBalanceAdded: BigNumber;
        _redirectedBalanceRemoved: BigNumber;
      }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlyingAssetAddress(overrides?: CallOverrides): Promise<BigNumber>;

    redirectInterestStream(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redirectInterestStreamOf(
      _from: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowInterestRedirectionTo(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintOnDeposit(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnOnLiquidation(
      _account: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOnLiquidation(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    principalBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    isTransferAllowed(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserIndex(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getInterestRedirectionAddress(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedirectedBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlyingAssetAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redirectInterestStream(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redirectInterestStreamOf(
      _from: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowInterestRedirectionTo(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintOnDeposit(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnOnLiquidation(
      _account: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOnLiquidation(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    principalBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTransferAllowed(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserIndex(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterestRedirectionAddress(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedirectedBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

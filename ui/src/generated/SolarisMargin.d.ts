/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SolarisMarginInterface extends ethers.utils.Interface {
  functions: {
    "ADDRESSES_PROVIDER()": FunctionFragment;
    "LENDING_POOL()": FunctionFragment;
    "UBESWAP_ROUTER()": FunctionFragment;
    "executeOperation(address[],uint256[],uint256[],address,bytes)": FunctionFragment;
    "getAmountsOut(address,address,uint256)": FunctionFragment;
    "getName()": FunctionFragment;
    "openLongPosition(address,address,uint256,uint256,uint256)": FunctionFragment;
    "openShortPosition(address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "repay(address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "swap(address,address,uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADDRESSES_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LENDING_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UBESWAP_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeOperation",
    values: [string[], BigNumberish[], BigNumberish[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openLongPosition",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openShortPosition",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADDRESSES_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LENDING_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UBESWAP_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openLongPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openShortPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {
    "PositionOpened(uint8)": EventFragment;
    "PositionRepaid(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PositionOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionRepaid"): EventFragment;
}

export type PositionOpenedEvent = TypedEvent<
  [number] & { positionType: number }
>;

export type PositionRepaidEvent = TypedEvent<
  [number] & { positionType: number }
>;

export class SolarisMargin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SolarisMarginInterface;

  functions: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<[string]>;

    LENDING_POOL(overrides?: CallOverrides): Promise<[string]>;

    UBESWAP_ROUTER(overrides?: CallOverrides): Promise<[string]>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAmountsOut(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    openLongPosition(
      baseAsset: string,
      quoteAsset: string,
      amount: BigNumberish,
      minAmount: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openShortPosition(
      baseAsset: string,
      quoteAsset: string,
      amount: BigNumberish,
      loanAmount: BigNumberish,
      minAmount: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      debtAsset: string,
      collateralAsset: string,
      aCollateralAsset: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

  LENDING_POOL(overrides?: CallOverrides): Promise<string>;

  UBESWAP_ROUTER(overrides?: CallOverrides): Promise<string>;

  executeOperation(
    assets: string[],
    amounts: BigNumberish[],
    premiums: BigNumberish[],
    initiator: string,
    params: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAmountsOut(
    _tokenIn: string,
    _tokenOut: string,
    _amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getName(overrides?: CallOverrides): Promise<string>;

  openLongPosition(
    baseAsset: string,
    quoteAsset: string,
    amount: BigNumberish,
    minAmount: BigNumberish,
    leverage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openShortPosition(
    baseAsset: string,
    quoteAsset: string,
    amount: BigNumberish,
    loanAmount: BigNumberish,
    minAmount: BigNumberish,
    leverage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    debtAsset: string,
    collateralAsset: string,
    aCollateralAsset: string,
    debtAmount: BigNumberish,
    collateralAmount: BigNumberish,
    minAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    _tokenIn: string,
    _tokenOut: string,
    _amountIn: BigNumberish,
    _amountOutMin: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

    LENDING_POOL(overrides?: CallOverrides): Promise<string>;

    UBESWAP_ROUTER(overrides?: CallOverrides): Promise<string>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAmountsOut(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<string>;

    openLongPosition(
      baseAsset: string,
      quoteAsset: string,
      amount: BigNumberish,
      minAmount: BigNumberish,
      leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openShortPosition(
      baseAsset: string,
      quoteAsset: string,
      amount: BigNumberish,
      loanAmount: BigNumberish,
      minAmount: BigNumberish,
      leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      debtAsset: string,
      collateralAsset: string,
      aCollateralAsset: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PositionOpened(uint8)"(
      positionType?: null
    ): TypedEventFilter<[number], { positionType: number }>;

    PositionOpened(
      positionType?: null
    ): TypedEventFilter<[number], { positionType: number }>;

    "PositionRepaid(uint8)"(
      positionType?: null
    ): TypedEventFilter<[number], { positionType: number }>;

    PositionRepaid(
      positionType?: null
    ): TypedEventFilter<[number], { positionType: number }>;
  };

  estimateGas: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    LENDING_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    UBESWAP_ROUTER(overrides?: CallOverrides): Promise<BigNumber>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAmountsOut(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    openLongPosition(
      baseAsset: string,
      quoteAsset: string,
      amount: BigNumberish,
      minAmount: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openShortPosition(
      baseAsset: string,
      quoteAsset: string,
      amount: BigNumberish,
      loanAmount: BigNumberish,
      minAmount: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      debtAsset: string,
      collateralAsset: string,
      aCollateralAsset: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADDRESSES_PROVIDER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LENDING_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UBESWAP_ROUTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openLongPosition(
      baseAsset: string,
      quoteAsset: string,
      amount: BigNumberish,
      minAmount: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openShortPosition(
      baseAsset: string,
      quoteAsset: string,
      amount: BigNumberish,
      loanAmount: BigNumberish,
      minAmount: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      debtAsset: string,
      collateralAsset: string,
      aCollateralAsset: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
